$board1 = [ 
    ["|","   x   ","|","   x   ","|","   x   ","|","       ","|","       ","|","       ","|","       ","|"], 
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"], 
    ["|","       ","|","       ","|","       ","|","       ","|","       ","|","   x   ","|","       ","|"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],   
    ["|","       ","|","       ","|","   x   ","|","       ","|","       ","|","       ","|","       ","|"], 
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],    
    ["|","       ","|","       ","|","       ","|","       ","|","       ","|","   x   ","|","       ","|"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],    
    ["|","       ","|","       ","|","       ","|","   x   ","|","       ","|","       ","|","       ","|"],  
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],   
    ["|","       ","|","       ","|","       ","|","       ","|","       ","|","       ","|","       ","|"], 
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],    
    ["|","       ","|","       ","|","       ","|","   x   ","|","   x   ","|","   x   ","|","       ","|"], 
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],  
]   




def horizontal_win
true_count = 1
$board1.each_with_index do |value, index| 
    
if (index.even? or index == 0) 
    value.each_with_index do |v, i| 
        # if v == "   x   "
        # counter += 1 
        # puts counter  
        case v 

        when "   x   "   
        
        # adds 2 to the index to check the next avaliable slot for player    
        add = i + 2
        
        if  add <= 13 and $board1[index][add].include?("   x   ")
            true_count += 1 
            puts true_count    

        elsif true_count >= 4 
            puts "VICTORY" 

        else  
            true_count = 1 
            puts "FAILURE"
        end 
          
        end
    end

end
end 
end 

horizontal_win

# line 1 
# 1, 3, 5, 7, 9, 11, 13
    
    
# def vertical_win?
#     times_in_a_row = 0
#     @board.rows.each do |row|
#       if row[(column.ord - 65)].player == @player
#         times_in_a_row += 1
#       else
#         times_in_a_row = 0
#       end
#       return true if times_in_a_row == 4
#     end
#     false
#   end

#   def horizontal_win?
#     times_in_a_row = 0
#     @board.rows[@move_row].each do |space|
#       if space.player == @player
#         times_in_a_row += 1
#       else
#         times_in_a_row = 0
#       end
#       return true if times_in_a_row == 4
#     end
#     false
#   end

#   def diagonal_win?
#     diagonal = []
#     #down_right
#     diagonal[0] = [[@move_row+1, (@column.ord - 65)+1], [@move_row+2, (@column.ord - 65)+2], [@move_row+3, (@column.ord - 65)+3]]
#     #up_right
#     diagonal[1] = [[@move_row-1, (@column.ord - 65)+1], [@move_row-2, (@column.ord - 65)+2], [@move_row-3, (@column.ord - 65)+3]]
#     #up_left
#     diagonal[2] = [[@move_row-1, (@column.ord - 65)-1], [@move_row-2, (@column.ord - 65)-2], [@move_row-3, (@column.ord - 65)-3]]
#      #down_left
#     diagonal[3] = [[@move_row+1, (@column.ord - 65)-1], [@move_row+2, (@column.ord - 65)-2], [@move_row+3, (@column.ord - 65)-3]]
#     diagonal.each do |line|
#       times_in_a_row = 1
#       line.each do |point|
#         if !@board.rows[point[0]].nil? && !@board.rows[point[0]][point[1]].nil? && @board.rows[point[0]][point[1]].player == @player
#           times_in_a_row += 1
#         else
#           times_in_a_row = 1
#         end
#         return true if times_in_a_row == 4
#       end
#     end
#     false
#   end
